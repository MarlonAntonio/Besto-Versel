---
import MainLayout from '../layouts/MainLayout.astro';
import HeaderEditor from '../components/HeaderEditor';
import SearchBar from '../components/SearchBar.astro';
import { getProducts } from '../utils/productStorage';
---

<MainLayout title="Panel de Administración">
    <div class="container mx-auto px-4 py-8">
        <div class="flex justify-between items-center mb-8">
            <div class="flex items-center gap-4">
                <button 
                    id="openUploadModal" 
                    class="py-2 px-4 bg-indigo-700 text-white rounded-md hover:bg-indigo-800 focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 flex items-center gap-2"
                >
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd" />
                    </svg>
                    Subir Producto
                </button>
                <button 
                    id="clearStorage" 
                    class="py-2 px-4 bg-red-700 text-white rounded-md hover:bg-red-800 focus:ring-2 focus:ring-red-500 focus:ring-offset-2 flex items-center gap-2"
                >
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
                    </svg>
                    Borrar Productos
                </button>
            </div>
            <h1 class="text-3xl font-bold text-gray-900">Panel Administrador</h1>
        </div>

        <!-- Editor del Header -->
        <HeaderEditor client:load />

        <!-- Galería de productos -->
        <div class="max-w-4xl mx-auto">
            <h2 class="text-2xl font-bold text-gray-900 mb-6">Productos Existentes</h2>
            <SearchBar 
                placeholder="Buscar productos" 
                id="adminSearchInput"
                aria-label="Buscar productos"
            />
            <div id="gallery" class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 mt-6">
                <!-- Products will be loaded here -->
            </div>
        </div>

        <!-- Modal de subida de productos -->
        <div id="uploadModal" class="fixed inset-0 bg-gray-900 bg-opacity-50 hidden items-center justify-center z-50">
            <div class="bg-white rounded-lg p-6 max-w-xl w-full max-h-[90vh] overflow-y-auto relative mx-4">
                <button id="closeModal" class="absolute top-4 right-4 text-gray-700 hover:text-gray-900">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
                
                <h2 class="text-2xl font-bold text-gray-900 mb-6">Subir Nuevo Producto</h2>
                
                <form id="uploadForm" class="space-y-4">
                    <div>
                        <label for="title" class="block text-sm font-medium text-gray-900">Titulo</label>
                        <input
                            type="text"
                            id="title"
                            name="title"
                            required
                            class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                        />
                    </div>
                    
                    <div>
                        <label for="urlUSA" class="block text-sm font-medium text-gray-900">URL Amazon Afiliados USA</label>
                        <input
                            type="url"
                            id="urlUSA"
                            name="urlUSA"
                            required
                            class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                        />
                    </div>
                    
                    <div>
                        <label for="urlMexico" class="block text-sm font-medium text-gray-900">URL Amazon Afiliados Mexico</label>
                        <input
                            type="url"
                            id="urlMexico"
                            name="urlMexico"
                            required
                            class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                        />
                    </div>
                    
                    <div>
                        <label for="image" class="block text-sm font-medium text-gray-900">Imagen</label>
                        <input
                            type="file"
                            id="image"
                            name="image"
                            accept="image/*"
                            required
                            class="mt-1 block w-full"
                        />
                        <img id="imagePreview" class="mt-2 hidden max-w-full h-auto" alt="Vista previa" />
                    </div>
                    
                    <div class="flex justify-end gap-4 mt-6">
                        <button
                            type="button"
                            id="cancelUpload"
                            class="py-2 px-4 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
                        >
                            Cancelar
                        </button>
                        <button
                            type="submit"
                            class="py-2 px-4 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
                        >
                            Guardar
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</MainLayout>

<script>
    import { saveProduct } from '../utils/productStorage';
    import { optimizeImage, uploadImage } from '../utils/imageOptimizer';

    interface Product {
        id?: string;
        title: string;
        urlUSA: string;
        urlMexico: string;
        image: string;
        createdAt?: string;
    }

    let products: Product[] = [];
    const modal = document.getElementById('uploadModal') as HTMLDivElement | null;
    const uploadForm = document.getElementById('uploadForm') as HTMLFormElement | null;
    const imageInput = document.getElementById('image') as HTMLInputElement | null;
    const imagePreview = document.getElementById('imagePreview') as HTMLImageElement | null;
    const gallery = document.getElementById('gallery') as HTMLDivElement | null;
    const searchInput = document.getElementById('adminSearchInput') as HTMLInputElement | null;

    // Función para escapar HTML y prevenir XSS
    function escapeHtml(unsafe: string): string {
        return unsafe
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;");
    }

    // Función para validar URLs
    function isValidUrl(url: string): boolean {
        try {
            new URL(url);
            return true;
        } catch {
            return false;
        }
    }

    // Función para mostrar notificaciones
    function showNotification(message: string, type: 'info' | 'success' | 'error' = 'info'): void {
        const notification = document.createElement('div');
        notification.className = `fixed bottom-4 right-4 p-4 rounded-lg shadow-lg ${
            type === 'error' ? 'bg-red-500' : type === 'success' ? 'bg-green-500' : 'bg-blue-500'
        } text-white z-50 transition-opacity duration-300`;
        notification.textContent = message;
        document.body.appendChild(notification);
        
        notification.style.opacity = '0';
        requestAnimationFrame(() => {
            notification.style.opacity = '1';
        });
        
        setTimeout(() => {
            notification.style.opacity = '0';
            notification.addEventListener('transitionend', () => {
                notification.remove();
            });
        }, 3000);
    }

    // Función para mostrar/ocultar el modal
    function toggleModal(show = true): void {
        if (!modal) return;
        
        const bodyStyle = document.body.style;
        if (show) {
            modal.style.display = 'flex';
            bodyStyle.overflow = 'hidden';
            // Añadir padding-right para compensar la scrollbar
            const scrollbarWidth = window.innerWidth - document.documentElement.clientWidth;
            bodyStyle.paddingRight = `${scrollbarWidth}px`;
        } else {
            modal.style.display = 'none';
            bodyStyle.overflow = '';
            bodyStyle.paddingRight = '';
            
            if (uploadForm) {
                uploadForm.reset();
                if (imagePreview) {
                    imagePreview.classList.add('hidden');
                    imagePreview.src = '';
                }
            }
        }
    }

    // Función para renderizar productos
    function renderProducts(productsToRender: Product[]): void {
        if (!gallery) return;

        if (!Array.isArray(productsToRender)) {
            console.error('Invalid products data:', productsToRender);
            showNotification('Error al mostrar los productos', 'error');
            return;
        }

        try {
            gallery.innerHTML = productsToRender.map((product, index) => {
                // Validar datos del producto
                if (!product || typeof product !== 'object') {
                    console.error('Invalid product:', product);
                    return '';
                }

                // Escapar datos para prevenir XSS
                const title = escapeHtml(product.title || '');
                const urlUSA = isValidUrl(product.urlUSA) ? product.urlUSA : '#';
                const urlMexico = isValidUrl(product.urlMexico) ? product.urlMexico : '#';
                const imageUrl = product.image || 'https://via.placeholder.com/400x400?text=Imagen+no+disponible';

                return `
                    <div class="bg-white border rounded-lg overflow-hidden shadow-sm hover:shadow-md transition-shadow">
                        <div class="relative pb-[100%] bg-gray-100">
                            <img 
                                src="${imageUrl}" 
                                alt="${title}"
                                class="absolute inset-0 w-full h-full object-cover"
                                loading="lazy"
                                onerror="this.src='https://via.placeholder.com/400x400?text=Error+de+imagen'"
                            >
                        </div>
                        <div class="p-4">
                            <h3 class="text-sm font-medium text-gray-900 line-clamp-2 mb-2">${title}</h3>
                            <div class="flex gap-2 mb-2">
                                <a 
                                    href="${urlUSA}" 
                                    target="_blank"
                                    rel="noopener noreferrer"
                                    class="text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded hover:bg-blue-200 transition-colors"
                                    ${urlUSA === '#' ? 'aria-disabled="true"' : ''}
                                >
                                    USA
                                </a>
                                <a 
                                    href="${urlMexico}" 
                                    target="_blank"
                                    rel="noopener noreferrer"
                                    class="text-xs bg-green-100 text-green-800 px-2 py-1 rounded hover:bg-green-200 transition-colors"
                                    ${urlMexico === '#' ? 'aria-disabled="true"' : ''}
                                >
                                    MX
                                </a>
                            </div>
                            <button 
                                type="button"
                                onclick="deleteProduct(${index})"
                                class="w-full mt-2 text-red-600 text-sm hover:text-red-800 focus:outline-none focus:ring-2 focus:ring-red-500 rounded-md px-2 py-1 transition-colors"
                                aria-label="Eliminar ${title}"
                            >
                                Eliminar
                            </button>
                        </div>
                    </div>
                `;
            }).join('');
        } catch (error) {
            console.error('Error rendering products:', error);
            showNotification('Error al mostrar los productos', 'error');
            gallery.innerHTML = '<p class="text-red-600">Error al cargar los productos. Por favor, intenta recargar la página.</p>';
        }
    }

    // Función para eliminar un producto
    window.deleteProduct = async function(index: number): Promise<void> {
        if (!confirm('¿Estás seguro de que deseas eliminar este producto?')) return;
        
        try {
            const updatedProducts = [...products];
            updatedProducts.splice(index, 1);
            await saveProduct(updatedProducts);
            products = updatedProducts;
            renderProducts(products);
            showNotification('Producto eliminado exitosamente', 'success');
        } catch (error) {
            console.error('Error deleting product:', error);
            showNotification('Error al eliminar el producto', 'error');
        }
    };

    // Función para cargar productos
    async function loadProducts(): Promise<void> {
        try {
            products = await getProducts();
            renderProducts(products);
        } catch (error) {
            console.error('Error loading products:', error);
            showNotification('Error al cargar los productos', 'error');
        }
    }

    // Función para manejar la búsqueda con debounce
    let searchTimeout: number;
    function handleSearch(searchTerm: string): void {
        const filteredProducts = products.filter(product => 
            product.title.toLowerCase().includes(searchTerm.toLowerCase())
        );
        renderProducts(filteredProducts);
    }

    // Función para procesar y subir imagen
    async function processAndUploadImage(file: File): Promise<string> {
        try {
            return new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.onload = async (e) => {
                    try {
                        if (!e.target) throw new Error('Event target is null');
                        const imageData = e.target.result as string;
                        const optimizedBlob = await optimizeImage(imageData);
                        const filename = `product-${Date.now()}-${file.name}`;
                        const imageUrl = await uploadImage(optimizedBlob, filename);
                        resolve(imageUrl);
                    } catch (error) {
                        reject(error);
                    }
                };
                reader.onerror = () => reject(new Error('Error reading file'));
                reader.readAsDataURL(file);
            });
        } catch (error) {
            console.error('Error processing image:', error);
            throw new Error('Failed to process and upload image');
        }
    }

    document.addEventListener('DOMContentLoaded', () => {
        // Cargar productos iniciales
        loadProducts();

        // Event listeners para el modal
        document.getElementById('openUploadModal')?.addEventListener('click', () => toggleModal(true));
        document.getElementById('closeModal')?.addEventListener('click', () => toggleModal(false));
        document.getElementById('cancelUpload')?.addEventListener('click', () => toggleModal(false));

        // Event listener para limpiar el almacenamiento
        document.getElementById('clearStorage')?.addEventListener('click', async () => {
            if (!confirm('¿Estás seguro de que deseas eliminar todos los productos?')) return;
            try {
                await saveProduct([]);
                products = [];
                renderProducts(products);
                showNotification('Todos los productos han sido eliminados', 'success');
            } catch (error) {
                console.error('Error clearing storage:', error);
                showNotification('Error al limpiar el almacenamiento', 'error');
            }
        });

        // Event listener para la búsqueda con debounce
        searchInput?.addEventListener('input', (e: Event) => {
            const target = e.target as HTMLInputElement;
            clearTimeout(searchTimeout);
            searchTimeout = window.setTimeout(() => {
                handleSearch(target.value.trim());
            }, 300);
        });

        // Event listener para previsualización de imagen
        imageInput?.addEventListener('change', async function(e: Event) {
            const target = e.target as HTMLInputElement;
            const file = target.files?.[0];
            
            if (!file) {
                if (imagePreview) {
                    imagePreview.classList.add('hidden');
                    imagePreview.src = '';
                }
                return;
            }

            // Validar tipo y tamaño de archivo
            if (!file.type.startsWith('image/')) {
                showNotification('Por favor selecciona un archivo de imagen válido', 'error');
                target.value = '';
                return;
            }

            const maxSize = 5 * 1024 * 1024; // 5MB
            if (file.size > maxSize) {
                showNotification('La imagen no debe superar los 5MB', 'error');
                target.value = '';
                return;
            }

            try {
                const reader = new FileReader();
                reader.onload = async function(e) {
                    if (!imagePreview) return;
                    
                    try {
                        if (!e.target) throw new Error('Event target is null');
                        const imageData = e.target.result as string;
                        const optimizedBlob = await optimizeImage(imageData);
                        const optimizedUrl = URL.createObjectURL(optimizedBlob);
                        
                        imagePreview.onload = () => {
                            imagePreview.classList.remove('hidden');
                            URL.revokeObjectURL(optimizedUrl);
                        };
                        
                        imagePreview.src = optimizedUrl;
                    } catch (error) {
                        console.error('Error optimizing preview image:', error);
                        showNotification('Error al previsualizar la imagen', 'error');
                        target.value = '';
                        imagePreview.classList.add('hidden');
                    }
                };
                
                reader.onerror = () => {
                    console.error('Error reading file:', reader.error);
                    showNotification('Error al leer el archivo', 'error');
                    target.value = '';
                };
                
                reader.readAsDataURL(file);
            } catch (error) {
                console.error('Error previewing image:', error);
                showNotification('Error al previsualizar la imagen', 'error');
                imageInput!.value = '';
            }
        });

        // Event listener para el formulario
        uploadForm?.addEventListener('submit', async function(e: Event) {
            e.preventDefault();
            
            try {
                const formData = new FormData(this as HTMLFormElement);
                const file = formData.get('image') as File;
                const title = formData.get('title') as string;
                const urlUSA = formData.get('urlUSA') as string;
                const urlMexico = formData.get('urlMexico') as string;

                // Validaciones
                if (!title?.trim()) {
                    showNotification('Por favor ingresa un título', 'error');
                    return;
                }

                if (!isValidUrl(urlUSA)) {
                    showNotification('La URL de USA no es válida', 'error');
                    return;
                }

                if (!isValidUrl(urlMexico)) {
                    showNotification('La URL de México no es válida', 'error');
                    return;
                }

                if (!file || !file.type.startsWith('image/')) {
                    showNotification('Por favor selecciona un archivo de imagen válido', 'error');
                    return;
                }

                const maxSize = 5 * 1024 * 1024; // 5MB
                if (file.size > maxSize) {
                    showNotification('La imagen no debe superar los 5MB', 'error');
                    return;
                }

                // Mostrar indicador de carga
                const submitButton = uploadForm.querySelector('button[type="submit"]') as HTMLButtonElement;
                const originalText = submitButton.textContent || '';
                submitButton.disabled = true;
                submitButton.textContent = 'Guardando...';

                try {
                    const imageUrl = await processAndUploadImage(file);
                    const newProduct: Product = {
                        title: title.trim(),
                        urlUSA,
                        urlMexico,
                        image: imageUrl,
                        createdAt: new Date().toISOString()
                    };

                    products.push(newProduct);
                    await saveProduct(products);
                    renderProducts(products);
                    toggleModal(false);
                    showNotification('Producto guardado exitosamente', 'success');
                } finally {
                    // Restaurar botón
                    submitButton.disabled = false;
                    submitButton.textContent = originalText;
                }
            } catch (error) {
                console.error('Error saving product:', error);
                showNotification('Error al guardar el producto', 'error');
            }
        });

        // Cerrar modal con Escape
        document.addEventListener('keydown', (e: KeyboardEvent) => {
            if (e.key === 'Escape' && modal?.style.display === 'flex') {
                toggleModal(false);
            }
        });

        // Cerrar modal al hacer clic fuera
        modal?.addEventListener('click', (e: MouseEvent) => {
            if (e.target === modal) {
                toggleModal(false);
            }
        });
    });
</script>

<style>
    /* Custom scrollbar styles */
    .overflow-y-auto {
        scrollbar-width: thin;
        scrollbar-color: #CBD5E0 #EDF2F7;
    }
    
    .overflow-y-auto::-webkit-scrollbar {
        width: 8px;
    }
    
    .overflow-y-auto::-webkit-scrollbar-track {
        background: #EDF2F7;
        border-radius: 4px;
    }
    
    .overflow-y-auto::-webkit-scrollbar-thumb {
        background-color: #CBD5E0;
        border-radius: 4px;
        border: 2px solid #EDF2F7;
    }

    /* Line clamp fallback for browsers that don't support the utility class */
    .line-clamp-2 {
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }
</style>
