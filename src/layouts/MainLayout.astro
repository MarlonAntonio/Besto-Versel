---
import Header from '../components/Header.astro';

const { title } = Astro.props;

// Obtener la configuración del header guardada o usar valores por defecto
const savedHeaderConfig = typeof localStorage !== 'undefined' 
    ? JSON.parse(localStorage.getItem('headerConfig') || '{}')
    : {};

const headerConfig = {
    title: savedHeaderConfig.title || "Mi Tienda Online",
    subtitle: savedHeaderConfig.subtitle || "Productos + Ofertas ",
    email: savedHeaderConfig.email || "tienda@ejemplo.com",
    profileImage: savedHeaderConfig.profileImage || "/profile.jpg",
    socialLinks: savedHeaderConfig.socialLinks || {}
};
---

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{title}</title>
    <meta name="description" content="Galería de productos con las mejores ofertas">
    <meta name="theme-color" content="#ffffff">
    <link rel="preconnect" href="https://cdn.jsdelivr.net">
    <link rel="dns-prefetch" href="https://cdn.jsdelivr.net">
    <link rel="preload" href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" as="style">
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    
    <style is:inline>
        /* Estilos críticos inline para mejor rendimiento */
        .fade-in { 
            opacity: 0; 
            animation: fadeIn 0.5s ease-in forwards;
        }
        @keyframes fadeIn {
            to { opacity: 1; }
        }
        .skeleton {
            background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
            background-size: 200% 100%;
            animation: loading 1.5s infinite;
        }
        @keyframes loading {
            from { background-position: 200% 0; }
            to { background-position: -200% 0; }
        }
    </style>
</head>
<body class="bg-gray-50">
    <Header 
        title={headerConfig.title}
        subtitle={headerConfig.subtitle}
        email={headerConfig.email}
        profileImage={headerConfig.profileImage}
        socialLinks={headerConfig.socialLinks}
    />
    <main class="fade-in">
        <slot />
    </main>

    <script>
        // Precargar imágenes críticas
        function preloadImage(src) {
            return new Promise((resolve, reject) => {
                const img = new Image();
                img.onload = resolve;
                img.onerror = reject;
                img.src = src;
            });
        }

        // Cargar scripts no críticos de forma asíncrona
        window.addEventListener('load', () => {
            // Precargar la imagen de perfil
            if (headerConfig.profileImage) {
                preloadImage(headerConfig.profileImage).catch(console.error);
            }

            // Registrar Service Worker si está disponible
            if ('serviceWorker' in navigator) {
                navigator.serviceWorker.register('/sw.js').catch(console.error);
            }
        });
    </script>
</body>
</html>
